"""user permissions

Revision ID: 4198d2577d59
Revises: 6c26d63cff3f
Create Date: 2020-12-22 19:45:43.709177

"""
import sqlalchemy as sa
from alembic import op, context
from src import config

# revision identifiers, used by Alembic.
revision = "4198d2577d59"
down_revision = "6c26d63cff3f"
branch_labels = None
depends_on = None


def upgrade():
    schema_upgrade()
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_upgrade()


def downgrade():
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_downgrade()
    schema_downgrade()


def schema_upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "user_permissions",
        sa.Column("id_user", sa.String(length=64), nullable=False),
        sa.Column("id_permission", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["id_permission"], ["permissions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["id_user"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id_user", "id_permission"),
    )
    op.add_column(
        "users", sa.Column("id_role", sa.String(length=64), nullable=True)
    )
    op.create_foreign_key(None, "users", "roles", ["id_role"], ["id"])
    # ### end Alembic commands ###


def schema_downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "id_role")
    op.drop_table("user_permissions")
    # ### end Alembic commands ###


def data_upgrade():
    access_key, _ = config.default_user()
    op.execute(
        f"""
        INSERT INTO user_permissions
    SELECT u.id AS id_user, p.id AS id_permission
    FROM users u CROSS JOIN permissions p
    WHERE u.access_key = '{access_key}'
        """
    )


def data_downgrade():
    pass
