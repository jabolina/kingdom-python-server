"""user table

Revision ID: 52283d2bf15b
Revises: 
Create Date: 2020-12-15 15:53:32.591880

"""
import sqlalchemy as sa
from uuid import uuid4
from datetime import datetime
from alembic import op, context

from src import config
from src.auth.domain import model

# revision identifiers, used by Alembic.
revision = "52283d2bf15b"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    users = schema_upgrade()
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_upgrade(users)


def downgrade():
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_downgrade()
    schema_downgrade()


def schema_upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    users = op.create_table(
        "users",
        sa.Column(
            "id",
            sa.String(length=64),
            nullable=False,
            default=lambda: str(uuid4()),
        ),
        sa.Column("access_key", sa.String(length=255), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=True),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password", sa.Text(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            default=lambda: datetime.today(),
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("access_key"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###
    return users


def schema_downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    # ### end Alembic commands ###


def data_upgrade(users):
    access_key, pwd = config.default_user()
    op.bulk_insert(
        users,
        [
            {
                "access_key": access_key,
                "name": "Admin",
                "email": "it@t10lab.com",
                "password": model.User.hash_password(pwd),
            }
        ],
    )


def data_downgrade():
    pass
