"""role_aggregate

Revision ID: 6c26d63cff3f
Revises: 52283d2bf15b
Create Date: 2020-12-17 18:36:39.813342

"""
import sqlalchemy as sa
from alembic import op, context
from uuid import uuid4
from datetime import datetime


# revision identifiers, used by Alembic.
revision = "6c26d63cff3f"
down_revision = "52283d2bf15b"
branch_labels = None
depends_on = None


def upgrade():
    permissions = schema_upgrade()
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_upgrade(permissions)


def downgrade():
    if context.get_x_argument(as_dictionary=True).get("data"):
        data_downgrade()
    schema_downgrade()


def schema_upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    permissions = op.create_table(
        "permissions",
        sa.Column(
            "id",
            sa.String(length=64),
            nullable=False,
            default=lambda: str(uuid4()),
        ),
        sa.Column("resource", sa.String(length=128), nullable=False),
        sa.Column(
            "action",
            sa.Enum(
                "LIST", "GET", "CREATE", "UPDATE", name="permissionactionenum"
            ),
            nullable=False,
        ),
        sa.Column("is_conditional", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("resource", "action", "is_conditional"),
    )
    op.create_table(
        "roles",
        sa.Column(
            "id",
            sa.String(length=64),
            nullable=False,
            default=lambda: str(uuid4()),
        ),
        sa.Column("code", sa.String(length=128), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            default=lambda: datetime.today(),
        ),
        sa.PrimaryKeyConstraint("id", "code"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("code"),
    )
    op.create_table(
        "role_permissions",
        sa.Column("id_role", sa.String(length=64), nullable=False),
        sa.Column("id_permission", sa.String(length=64), nullable=False),
        sa.ForeignKeyConstraint(
            ["id_permission"], ["permissions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["id_role"], ["roles.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id_role", "id_permission"),
    )
    # ### end Alembic commands ###
    return permissions


def schema_downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("role_permissions")
    op.drop_table("roles")
    op.drop_table("permissions")
    op.execute("DROP TYPE IF EXISTS permissionactionenum")
    # ### end Alembic commands ###


def data_upgrade(permissions):
    op.bulk_insert(
        permissions,
        [
            {"resource": "user", "action": "CREATE", "is_conditional": False},
            {"resource": "user", "action": "UPDATE", "is_conditional": False},
            {"resource": "user", "action": "GET", "is_conditional": False},
            {"resource": "user", "action": "LIST", "is_conditional": False},
            {"resource": "role", "action": "CREATE", "is_conditional": False},
            {"resource": "role", "action": "UPDATE", "is_conditional": False},
            {"resource": "role", "action": "GET", "is_conditional": False},
            {"resource": "role", "action": "LIST", "is_conditional": False},
            {
                "resource": "permission",
                "action": "LIST",
                "is_conditional": False,
            },
        ],
    )


def data_downgrade():
    pass
